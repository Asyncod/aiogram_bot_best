# -*- coding: utf-8 -*-
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram import Bot, Dispatcher, types, executor, filters
from aiogram.dispatcher import FSMContext

import config
import random
import base
import asyncio
import requests


#### PARAMETRS BOT'S ####
bot = Bot(config.bot_token, parse_mode="HTML")
dp = Dispatcher(bot, storage=MemoryStorage())
admin_id_list = [] # admin list
proger_id = 12345 # id for send error logs


## NEED BASE ##
base.create_db()


#### FSM CLASS ####
class FSM_adv(StatesGroup):
    first_captcha = State()
    add_balance = State()
    add_unik_user = State()
    add_unik_balance = State()


#### NEED CLASS ####
class Setting():
    message_history = []


#### ALL HANDLER'S FUNC ####
async def check_message(user_id): # check user's message
    if (user_id in Setting.message_history):
        return True
    else:
        return False


async def in_chat(message): # check user's chat status
    stats = await bot.get_chat_member(chat_id=config.channel_id, user_id=message.chat.id)
    status = stats.status
    if status == "left":
        return False
    else:
        return True


async def generate_ref(message):
    link = f"https://t.me/{config.channel_referal}?start={message.chat.id}"
    return link


async def referal_widthward(message):
    await asyncio.sleep(5)

    summe = base.get_withdraw(message.chat.id)

    random_list = [1, 2, 4, 5, 6, 7, 8, 9, 0]

    code_text = ""
    for i in range(10):
        code_text += str(random.choice(random_list))

    try:
        answer_post = requests.post(url="https://pay.crypt.bot/api/transfer",
                                    headers={"Host": "pay.crypt.bot",
                                             "Crypto-Pay-API-Token": config.appl_token},
                                    data={"user_id": message.chat.id,
                                          "asset": "TON",
                                          "amount": summe,
                                          "spend_id": code_text,
                                          "comment": "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ª—é–¥–µ–π!"})

        json_answer = answer_post.json()

        with open("logs_ref.txt", "a") as file:
            file.write(f"{json_answer} {message.chat.id} @{message.from_user.username}\n")

        if json_answer["ok"] == True:
            base.cleaning_withdraw(message.chat.id)
            await bot.send_message(chat_id=message.chat.id,
                                   text="–ù–∞ –≤–∞—à —Å—á–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω –ø–ª–∞—Ç–µ–∂ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ, —Å–ø–∞—Å–∏–±–æ —á—Ç–æ —Å –Ω–∞–º–∏!")

        elif json_answer["ok"] == False:
            await bot.send_message(chat_id=proger_id,
                                   text=f"<b>‚ö† –û—à–∏–±–∫–∞!</b>\n\n"
                                        f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {message.from_user.id}\n"
                                        f"<b>–ö–æ–¥:</b> <code>{json_answer}</code>")
            print(json_answer)

    except Exception as exec:
        await bot.send_message(chat_id=proger_id,
                               text=f"<b>‚ö† –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º</b>\n\n"
                                    f"–ö–æ–¥ –æ—à–∏–±–∫–∏ <code>{exec}</code>\n\n"
                                    f"–í—ã–≤–æ–¥ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –¥–µ–Ω–µ–≥ —É {message.chat.id}")
        print(json_answer)


async def sleep_wait(message):
    await asyncio.sleep(86400)

    random_list = [1, 2, 4, 5, 6, 7, 8, 9, 0]

    code_text = ""
    for i in range(10):
        code_text += str(random.choice(random_list))

    if (await in_chat(message) == True):
        try:
            answer_post = requests.post(url="https://pay.crypt.bot/api/transfer",
                                        headers={"Host": "pay.crypt.bot",
                                                "Crypto-Pay-API-Token": config.appl_token},
                                       data={"user_id": message.chat.id,
                                             "asset": "TON",
                                             "amount": "0.015",
                                             "spend_id": code_text,
                                             "comment": "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!"})

            json_answer = answer_post.json()

            with open("logs.txt", "a") as file:
                file.write(f"{json_answer} {message.chat.id} @{message.from_user.username}\n")

            if json_answer["ok"] == True:
                await bot.send_message(chat_id=message.chat.id,
                                       text="–ù–∞ –≤–∞—à —Å—á–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω –ø–ª–∞—Ç–µ–∂ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É, —Å–ø–∞—Å–∏–±–æ —á—Ç–æ —Å –Ω–∞–º–∏!")


            elif json_answer["ok"] == False:
                if json_answer["error"]["name"] == "USER_NOT_FOUND":
                    keyboard = types.InlineKeyboardMarkup()
                    but1 = types.InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑", callback_data="second_check")
                    keyboard.add(but1)

                    await bot.send_message(chat_id=message.chat.id,
                                           text="<b>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å <a href='t.me/CryptoBot?start=r-633430'>@CryptoBot</a></b>\n\n"
                                                "–ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏",
                                           reply_markup=keyboard,
                                           disable_web_page_preview=True)

                elif json_answer["error"]["name"] == "SPEND_ID_ALREADY_USED":
                    await bot.send_message(chat_id=proger_id,
                                           text=f"<b>‚ö† –û—à–∏–±–∫–∞ —Å–æ SPEND_ID, –∑–∞–ø—É—â–µ–Ω–∞ –ø–æ–≤—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞</b>\n\n"
                                                f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {message.from_user.id}\n"
                                                f"<b>–ö–æ–¥:</b> <code>{json_answer}</code>")
                    print(json_answer)
                    await sleep_wait(message)

                else:
                    await bot.send_message(chat_id=proger_id,
                                           text=f"<b>‚ö† –û—à–∏–±–∫–∞!</b>\n\n"
                                                f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {message.from_user.id}\n"
                                                f"<b>–ö–æ–¥:</b> <code>{json_answer}</code>")
                    print(json_answer)

        except Exception as exec:
            await bot.send_message(chat_id=proger_id,
                                   text=f"<b>‚ö† –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º</b>\n\n"
                                        f"–ö–æ–¥ –æ—à–∏–±–∫–∏ <code>{exec}</code>\n\n"
                                        f"–í—ã–≤–æ–¥ –¥–µ–Ω–µ–≥ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É —É {message.chat.id}")
            print(json_answer)

    elif (await in_chat(message) == True):
        keyboard = types.InlineKeyboardMarkup()
        but1 = types.InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑", callback_data="second_check")
        keyboard.add(but1)

        await bot.send_message(chat_id=message.chat.id,
                               text="<b>–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!</b>\n\n"
                                    "–î–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –≤–∞–º –Ω–∞–¥–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã–º –Ω–∞ –∫–∞–Ω–∞–ª! –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏",
                               reply_markup=keyboard)


async def check_user(message):
    answer = base.get_user(message.from_user.id)
    username = message.from_user.username
    name = message.from_user.first_name
    if answer == None:
        base.new_user(id_user=message.from_user.id,
                      username=username,
                      name=name)
    else:
        return True


async def add_invited(message, inviter):
    base.add_invited(message.from_user.id, inviter)


async def new_referal(message, referal_id):
    referal_count = base.get_referal(referal_id)
    if (message.from_user.username != None):
        username = base.get_username(message.from_user.id)
        await bot.send_message(chat_id=referal_id, text=f"–ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª @{username}\n"
                                                        f"–†–µ—Ñ–µ–∞–ª–æ–≤ —Å–µ–π—á–∞—Å: {referal_count}")

    else:
        name = base.get_name(message.from_user.id)
        await bot.send_message(chat_id=referal_id, text=f"–ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª {name}\n"
                                                        f"–†–µ—Ñ–µ–∞–ª–æ–≤ —Å–µ–π—á–∞—Å: {referal_count}")


async def big_og():
    list_lider = base.get_lider()
    big_man = list_lider[0]
    text = f"{big_man[1]} —Å {big_man[3]} —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏!"
    return text


async def liders_table():
    list_lider = base.get_lider()
    position = 0
    main_text = "<b>üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:</b>\n\n"

    if len(list_lider) <= 10:
        for users in list_lider:
            position += 1
            main_text += f"<b>ID: {users[0]}</b>\n" \
                         f"USER: @{users[1]}\n" \
                         f"NAME: {users[2]}\n" \
                         f"COUNT: {users[3]}\n\n"

    else:
        for users in (list_lider[:20]):
            position += 1
            main_text += f"<b>ID: {users[0]}</b>\n" \
                         f"USER: @{users[1]}\n" \
                         f"NAME: {users[2]}\n" \
                         f"COUNT: {users[3]}\n\n"

    return main_text


### MESSAGE HISTORY ####
@dp.message_handler(filters.IDFilter(chat_id=config.chat_id))
async def hand_mess(message: types.Message):
    if (len(Setting.message_history) >= 20):
        Setting.message_history.pop(0)
        Setting.message_history.append(message.from_user.id)

    else:
        Setting.message_history.append(message.from_user.id)


@dp.message_handler(state=FSM_adv.add_balance)
async def hand_mess(message: types.Message, state: FSMContext):
    try:
        if str(message.text).isdigit():
            answer_post = requests.post(url="https://pay.crypt.bot/api/createInvoice",
                                        headers={"Host": "pay.crypt.bot",
                                                 "Crypto-Pay-API-Token": config.appl_token},
                                        data={"asset": "TON",
                                              "amount": message.text})

            need_json = answer_post.json()

            if need_json['ok'] == True:
                keyboard_1 = types.InlineKeyboardMarkup(row_width=1)
                but1 = types.InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", url=need_json['result']['pay_url'])
                but2 = types.InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_admin")
                keyboard_1.add(but1, but2)

                await bot.send_message(chat_id=message.chat.id,
                                       text=f"<b>–°—É–º–º–∞:</b> {need_json['result']['amount']}\n"
                                            f"<b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {need_json['result']['created_at']}",
                                       reply_markup=keyboard_1,
                                       disable_web_page_preview=True)
                await state.finish()

            else:
                await bot.send_message(chat_id=message.chat.id,
                                       text=f"<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–ø–æ–ª–µ–Ω–∏—è, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞</b>\n\n"
                                            f"<b>–ö–æ–¥:</b> <code>{need_json}</code>")
                await state.finish()

        else:
            await bot.send_message(chat_id=message.chat.id,
                                   text="–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")

    except Exception as exep:
        keyboard_2 = types.InlineKeyboardMarkup()
        but1 = types.InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_admin")
        keyboard_2.add(but1)

        await state.finish()
        await bot.edit_message_text(chat_id=message.chat.id,
                                    message_id=message.message_id,
                                    text=f"<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—á–µ—Ç–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
                                         f"<b>–ö–æ–¥:</b> <code>{exep}</code>",
                                    reply_markup=keyboard_2,
                                    disable_web_page_preview=True)


@dp.message_handler(state=FSM_adv.add_unik_user)
async def add_unik(message: types.Message):
    if str(message.text).isdigit():
        with open("unik_id.txt", "r") as file:
            list_id = file.read().split("\n")

        if message.text not in list_id:
            with open("unik_id.txt", "a") as file:
                file.write(f"{message.text}\n")

            await FSM_adv.add_unik_balance.set()
            await bot.send_message(chat_id=message.chat.id,
                                   text="<i>–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏–±–∞–≤–∫—É –¥–ª—è —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞</i>\n\n"
                                        "<b>–ù–∞–ø—Ä–∏–º–µ—Ä:</b> <code>0.1</code>",
                                   disable_web_page_preview=True)

        else:
            keyboard = types.InlineKeyboardMarkup()
            but1 = types.InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_admin")
            keyboard.add(but1)

            await bot.send_message(chat_id=message.chat.id,
                                   text="<b>–î–∞–Ω–Ω—ã–π ID —É–∂–µ –µ—Å—Ç—å!</b>\n"
                                        "–í–µ—Ä–Ω–∏—Ç–µ—Å—å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–π",
                                   reply_markup=keyboard,
                                   disable_web_page_preview=True)

    else:
        await bot.send_message(chat_id=message.chat.id,
                               text="–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")


@dp.message_handler(state=FSM_adv.add_unik_balance)
async def add_balic(message: types.Message, state: FSMContext):
    with open("unik_balance.txt", "a") as file:
        file.write(f"{message.text}\n")

    keyboard = types.InlineKeyboardMarkup()
    but1 = types.InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_admin")
    keyboard.add(but1)

    await bot.send_message(chat_id=message.chat.id,
                           text="<b>ü•µ –í—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ</b>",
                           reply_markup=keyboard,
                           disable_web_page_preview=True)

    await state.finish()


#### START HANDLERS ####
@dp.message_handler(commands=["start"])
async def starting(message: types.Message):
    user = message.from_user.id
    referal = message.text

    if (referal.find(" ")) != -1:  ## if referal link
        referal_text = int(referal[referal.find(" ") + 1:])
        if (referal_text != user) and (await check_user(message) != True):  ## new referal

            await asyncio.sleep(300)
            base.new_referal(referal_text)
            base.add_balance(referal_text)
            await new_referal(message, referal_text)
            await add_invited(message, referal_text)

            keyboard = types.InlineKeyboardMarkup()
            but1 = types.InlineKeyboardButton(text="–Ø –≥–æ—Ç–æ–≤!", callback_data="start")
            keyboard.add(but1)

            await bot.send_photo(chat_id=message.chat.id,
                                 photo="AgACAgIAAxkBAAMFYqMb00Q0qqZbHXqKBs9m0CshA2wAAoe5MRvfvRhJW21iVpt0QCMBAAMCAAN5AAMkBA",
                                 caption="<b>üôã –ü—Ä–∏–≤–µ—Ç!</b>\n\n")
            await bot.send_message(chat_id=message.chat.id,
                                   text="<i>üåø –Ø —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç –æ—Ç –∫—Ä–∏–ø—Ç–æ–∫–æ–º–ø–∞–Ω–∏–∏ <a href='https://t.me/in_rusyaev'>‚Äú–†—É—Å—è–µ–≤ –∏ –ø–∞—Ä—Ç–Ω—ë—Ä—ã‚Äù</a></i>\n\n"
                                        "–ó–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –º—ã —Ä–∞–∑–¥–∞—ë–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã TON, –∞ –∞–∫—Ç–∏–≤–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –±—É–¥—É—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö, —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö, –≥–¥–µ –º—ã –±—É–¥–µ–º –¥–∞—Ä–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É!\n\n"
                                        "<b>üíé –ß–µ–º –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π –ø—Ä–∏–≤–µ–¥–µ—Ç–µ, —Ç–µ–º –±–æ–ª—å—à–µ –ø–æ–¥–∞—Ä–∫–æ–≤ –±—É–¥–µ—Ç!</b>\n\n"
                                        "<i>–¢—ã –≥–æ—Ç–æ–≤ –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞ —Å–≤–æ–π –∫–æ—à–µ–ª—ë–∫ —Ç–æ–∫–µ–Ω—ã? –¢–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ–º!</i>",
                                   reply_markup=keyboard,
                                   disable_web_page_preview=True)

        else:
            await cabinet(message)

    else: ## if not referal (simple /start)

        if (message.from_user.id in admin_id_list):
            await check_user(message)
            await admin_cabinet(message)

        elif (await check_user(message) == True) and (await in_chat(message) == True):
            await cabinet(message)

        else:
            keyboard = types.InlineKeyboardMarkup()
            but1 = types.InlineKeyboardButton(text="–Ø –≥–æ—Ç–æ–≤!", callback_data="start")
            keyboard.add(but1)

            await bot.send_photo(chat_id=message.chat.id,
                                 photo="AgACAgIAAxkBAAMFYqMb00Q0qqZbHXqKBs9m0CshA2wAAoe5MRvfvRhJW21iVpt0QCMBAAMCAAN5AAMkBA",
                                 caption="<b>üôã –ü—Ä–∏–≤–µ—Ç!</b>\n\n")
            await bot.send_message(chat_id=message.chat.id,
                                   text="<i>üåø –Ø —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç –æ—Ç –∫—Ä–∏–ø—Ç–æ–∫–æ–º–ø–∞–Ω–∏–∏ <a href='https://t.me/in_rusyaev'>‚Äú–†—É—Å—è–µ–≤ –∏ –ø–∞—Ä—Ç–Ω—ë—Ä—ã‚Äù</a></i>\n\n"
                                        "–ó–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –º—ã —Ä–∞–∑–¥–∞—ë–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã TON, –∞ –∞–∫—Ç–∏–≤–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –±—É–¥—É—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö, —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö, –≥–¥–µ –º—ã –±—É–¥–µ–º –¥–∞—Ä–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É!\n\n"
                                        "<b>üíé –ß–µ–º –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π –ø—Ä–∏–≤–µ–¥–µ—Ç–µ, —Ç–µ–º –±–æ–ª—å—à–µ –ø–æ–¥–∞—Ä–∫–æ–≤ –±—É–¥–µ—Ç!</b>\n\n"
                                        "<i>–¢—ã –≥–æ—Ç–æ–≤ –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞ —Å–≤–æ–π –∫–æ—à–µ–ª—ë–∫ —Ç–æ–∫–µ–Ω—ã? –¢–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ–º!</i>",
                                   reply_markup=keyboard,
                                   disable_web_page_preview=True)


async def cabinet(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    but1 = types.InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stat")
    but2 = types.InlineKeyboardButton(text="üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data="ref_link")
    but3 = types.InlineKeyboardButton(text="‚ÑπÔ∏è –ü—Ä–∞–≤–∏–ª–∞", callback_data="rule")
    but4 = types.InlineKeyboardButton(text="üí∏ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤—ã–≤–æ–¥", callback_data="money")
    keyboard.add(but2)
    keyboard.add(but1, but3)
    keyboard.add(but4)

    await bot.send_photo(chat_id=message.chat.id,
                         photo="AgACAgIAAxkBAAMFYqMb00Q0qqZbHXqKBs9m0CshA2wAAoe5MRvfvRhJW21iVpt0QCMBAAMCAAN5AAMkBA",
                         caption="<b>üôã –ü—Ä–∏–≤–µ—Ç!</b>\n\n")
    await bot.send_message(chat_id=message.chat.id,
                           text=f"<b>–≠—Ç–æ —Ç–≤–æ–π –∫–∞–±–∏–Ω–µ—Ç</b>\n\n"
                                f"–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É —Å—Å—ã–ª–∫—É, –∏–∑—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ª—é–¥–µ–π –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é —Å—É–º–º—É",
                           reply_markup=keyboard,
                           disable_web_page_preview=True)


async def admin_cabinet(message: types.Message):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    but1 = types.InlineKeyboardButton(text="–£–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞", callback_data="get_balance")
    but2 = types.InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞", callback_data="add_balance")
    but3 = types.InlineKeyboardButton(text="–¢–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤", callback_data="top_lider")
    but4 = types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å",
                                      callback_data="unik_user")
    but5 = types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º —é–∑–µ—Ä–∞", callback_data="rej_user")
    keyboard.add(but1, but2, but3, but4, but5)

    famous = await big_og()
    await bot.send_message(chat_id=message.chat.id,
                           text=f"<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å! üßëüèº‚Äçüíª</b>\n\n"
                                f"<b>ü•∏ –õ—é–¥–µ–π –≤ –±–∞–∑–µ:</b> {base.get_count_man()} —á–µ–ª–æ–≤–µ–∫\n"
                                f"<b>üèÜ –°–∞–º—ã–π –∫—Ä—É—Ç–æ–π:</b> @{famous}",
                           reply_markup=keyboard,
                           disable_web_page_preview=True)


#### ALL INLINE MODE ####
@dp.callback_query_handler(state="*")
async def inline_kb_answer_callback_handler(query: types.CallbackQuery, state: FSMContext):
    if (query.data == "start"):
        keyboard = types.InlineKeyboardMarkup()
        but1 = types.InlineKeyboardButton(text="–Ø –≤—ã–ø–æ–ª–Ω–∏–ª –≤—Å–µ —É—Å–ª–æ–≤–∏—è", callback_data="check")
        keyboard.add(but1)

        await bot.send_chat_action(chat_id=query.message.chat.id,
                                   action="typing")
        await bot.edit_message_text(chat_id=query.message.chat.id,
                                    message_id=query.message.message_id,
                                    text="<b>–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª ‚Äú–†—É—Å—è–µ–≤ –∏ –ø–∞—Ä—Ç–Ω—ë—Ä—ã‚Äù</b> - @in_rusyaev.\n\n"
                                         "<b>1)</b> –ü–æ—Å—Ç–∞–≤—å –ª–∞–π–∫ –Ω–∞ –∫—Ä–∞–π–Ω–∏–π –ø–æ—Å—Ç\n"
                                         "<b>2)</b> –ü—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –ª—é–±–æ–π –ø–æ—Å—Ç, –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–≤ –µ–≥–æ\n\n"
                                         "<i><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Ç–æ–ª—å–∫–æ —Å–º–∞–π–ª–∏–∫ –∏–ª–∏ –æ–¥–Ω–æ —Å–ª–æ–≤–æ, –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–µ –ø—Ä–æ–π–¥—É—Ç</b></i>\n\n"
                                         "<i>–ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–∏—à—å –≤—Å–µ —É—Å–ª–æ–≤–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –≤ –±–æ—Ç –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É <b>‚Äú–Ø –≤—ã–ø–æ–ª–Ω–∏–ª –≤—Å–µ —É—Å–ª–æ–≤–∏—è‚Äù</b></i>",
                                    reply_markup=keyboard)

    elif (query.data == "second_check"):
        if (await in_chat(query.message)) == True:
            await bot.edit_message_text(chat_id=query.message.chat.id,
                                        message_id=query.message.message_id,
                                        text="–•–æ—Ä–æ—à–æ, –≤—ã —Å–Ω–æ–≤–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ. –û–∂–∏–¥–∞–π—Ç–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è")
            await sleep_wait(query.message)

        elif (await in_chat(query.message)) != True:
            keyboard = types.InlineKeyboardMarkup()
            but1 = types.InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑", callback_data="second_check")
            keyboard.add(but1)

            await bot.edit_message_text(chat_id=query.message.chat.id,
                                        message_id=query.message.message_id,
                                        text="–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª",
                                        reply_markup=keyboard)

    elif (query.data == "check"):
        if (await in_chat(query.message) == True): # check sub
            try:
                if (await check_message(query.message.chat.id) == True): # check message
                    keyboard = types.InlineKeyboardMarkup()
                    but1 = types.InlineKeyboardButton(text="–ü—Ä–æ–π—Ç–∏ –∫–∞–ø—Ç—á—É", callback_data="captcha")
                    keyboard.add(but1)

                    await bot.edit_message_text(chat_id=query.message.chat.id,
                                                message_id=query.message.message_id,
                                                text="<b>ü§ñ –•–æ—Ä–æ—à–æ, –≤—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!</b>\n\n"
                                                     "<i>–û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç</i>",
                                                reply_markup=keyboard)

                elif (await check_message(query.message.chat.id) == False):
                    keyboard = types.InlineKeyboardMarkup()
                    but1 = types.InlineKeyboardButton(text="–Ø –æ—Å—Ç–∞–≤–∏–ª –∫–æ–º–º–µ–Ω–∞—Ç—Ä–∏–π", callback_data="check")
                    keyboard.add(but1)

                    await bot.answer_callback_query(callback_query_id=query.id, text='‚ö†Ô∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –æ—Å—Ç–∞–≤–ª–µ–Ω!',
                                                    show_alert=True)
                    await bot.edit_message_text(chat_id=query.message.chat.id,
                                                message_id=query.message.message_id,
                                                text="<b>–í—ã –∑–∞–±—ã–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π @in_rusyaev</b>\n\n"
                                                     "<i>–Ø –ø–æ–¥–æ–∂–¥—É</i> ü§®",
                                                reply_markup=keyboard,
                                                disable_web_page_preview=True)

            except Exception:
                pass
        else:
            try:
                keyboard = types.InlineKeyboardMarkup()
                but1 = types.InlineKeyboardButton(text="–Ø –≤—ã–ø–æ–ª–Ω–∏–ª –≤—Å–µ —É—Å–ª–æ–≤–∏—è", callback_data="check")
                keyboard.add(but1)

                await bot.answer_callback_query(callback_query_id=query.id, text='‚ö†Ô∏è –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!',
                                                show_alert=True)
                await bot.edit_message_text(chat_id=query.message.chat.id,
                                            message_id=query.message.message_id,
                                            text="<b>–í—ã –∑–∞–±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª @in_rusyaev!</b>\n\n"
                                                 "<i>–ò—Å–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ</i> üò•",
                                            reply_markup=keyboard,
                                            disable_web_page_preview=True)
            except Exception:
                pass

    elif (query.data == "cabinet") or (query.data == "back"):
        keyboard = types.InlineKeyboardMarkup()
        but1 = types.InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stat")
        but2 = types.InlineKeyboardButton(text="üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data="ref_link")
        but3 = types.InlineKeyboardButton(text="‚ÑπÔ∏è –ü—Ä–∞–≤–∏–ª–∞", callback_data="rule")
        but4 = types.InlineKeyboardButton(text="üí∏ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤—ã–≤–æ–¥", callback_data="money")
        keyboard.add(but2)
        keyboard.add(but1, but3)
        keyboard.add(but4)

        await bot.edit_message_text(chat_id=query.message.chat.id,
                                    message_id=query.message.message_id,
                                    text=f"<b>–≠—Ç–æ —Ç–≤–æ–π –∫–∞–±–∏–Ω–µ—Ç</b>\n\n"
                                         f"–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É, –∏–∑—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ª—é–¥–µ–π –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é —Å—É–º–º—É",
                                    reply_markup=keyboard,
                                    disable_web_page_preview=True)

    elif (query.data == "ref_link"):
        keyboard = types.InlineKeyboardMarkup()
        but1 = types.InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stat")
        but3 = types.InlineKeyboardButton(text="‚ÑπÔ∏è –ü—Ä–∞–≤–∏–ª–∞", callback_data="rule")
        but4 = types.InlineKeyboardButton(text="üí∏ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤—ã–≤–æ–¥", callback_data="money")
        keyboard.add(but1, but3)
        keyboard.add(but4)

        await bot.edit_message_text(chat_id=query.message.chat.id,
                                    message_id=query.message.message_id,
                                    text=f"<b>–≠—Ç–æ —Ç–≤–æ–π –∫–∞–±–∏–Ω–µ—Ç</b>\n\n"
                                         f"–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É —Å—Å—ã–ª–∫—É, –∏–∑—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ª—é–¥–µ–π –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é —Å—É–º–º—É\n\n"
                                         f"<b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b> <code>{await generate_ref(query.message)}</code>",
                                    reply_markup=keyboard,
                                    disable_web_page_preview=True)

    elif (query.data == "stat"):
        keyboard = types.InlineKeyboardMarkup()
        but1 = types.InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back")
        keyboard.add(but1)

        await bot.edit_message_text(chat_id=query.message.chat.id,
                                    message_id=query.message.message_id,
                                    text=f"üë§ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {base.get_referal(query.message.chat.id)}\n"
                                         f"üíµ –°—É–º–º–∞ –∑–∞—Ä–∞–±–æ—Ç–∫–∞: {base.get_balance(query.message.chat.id)}\n\n"
                                         f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {base.get_withdraw(query.message.chat.id)}",
                                    reply_markup=keyboard,
                                    disable_web_page_preview=True)

    elif (query.data == "rule"):
        keyboard = types.InlineKeyboardMarkup()
        but1 = types.InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back")
        keyboard.add(but1)

        await bot.edit_message_text(chat_id=query.message.chat.id,
                                    message_id=query.message.message_id,
                                    text="<b>üí° –ü—Ä–∞–≤–∏–ª–∞ –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>\n\n"
                                         "‚ñ∫ <i>–ß–µ–º –±–æ–ª—å—à–µ –≤—ã –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç–µ –ª—é–¥–µ–π, —Ç–µ–º –±–æ–ª—å—à–µ –≤–∞—à –∑–∞—Ä–∞–±–æ—Ç–æ–∫!</i>\n"
                                         "‚ñ∫ <i>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –æ—Ç 0.16 $TON</i>\n"
                                         "‚ñ∫ <i>–ë—ã—Å—Ç—Ä–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ <a href='t.me/CryptoBot?start=r-633430'>@CryptoBot</a></i>\n\n"
                                         "<code>10 —á–µ–ª–æ–≤–µ–∫ - 0.015 $TON\n"
                                         "20 —á–µ–ª–æ–≤–µ–∫ - 0.03 $TON\n"
                                         "30 —á–µ–ª–æ–≤–µ–∫ - 0.048 $TON\n"
                                         "40 —á–µ–ª–æ–≤–µ–∫ - 0.063 $TON\n"
                                         "50 —á–µ–ª–æ–≤–µ–∫ - 0.079 $TON\n"
                                         "60 —á–µ–ª–æ–≤–µ–∫ - 0.094 $TON\n"
                                         "70 —á–µ–ª–æ–≤–µ–∫ - 0.11 $TON\n"
                                         "80 —á–µ–ª–æ–≤–µ–∫ - 0.13 $TON\n"
                                         "90 —á–µ–ª–æ–≤–µ–∫ - 0.14 $TON\n"
                                         "–æ—Ç 100 —á–µ–ª–æ–≤–µ–∫ - 0.16 $TON</code>\n\n"
                                         "<b>–ß–µ–º –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π, —Ç–µ–º –≤—ã—à–µ –∏ —Ü–µ–Ω–Ω–µ–µ –Ω–∞–≥—Ä–∞–¥–∞</b>",
                                    reply_markup=keyboard,
                                    disable_web_page_preview=True)

    elif (query.data == "money"):
        keyboard = types.InlineKeyboardMarkup()
        but1 = types.InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back")
        keyboard.add(but1)

        if (base.get_withdraw(query.message.chat.id) > 0):
            await bot.edit_message_text(chat_id=query.message.chat.id,
                                        message_id=query.message.message_id,
                                        text=f"–ù–∞ –≤—ã–≤–æ–¥ {base.get_withdraw(query.message.chat.id)} $TON, –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å",
                                        reply_markup=keyboard,
                                        disable_web_page_preview=True)

            await referal_widthward(query.message)

        elif (base.get_withdraw(query.message.chat.id) == 0):
            await bot.edit_message_text(chat_id=query.message.chat.id,
                                        message_id=query.message.message_id,
                                        text="<b>–£ –≤–∞—Å –Ω—É–ª–µ–≤–æ–π –±–∞–ª–∞–Ω—Å!</b>",
                                        reply_markup=keyboard,
                                        disable_web_page_preview=True)

            # text = f"<b>–ù–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞</b>\n\n"
            # f"–°—É–º–º–∞ —Å–µ–π—á–∞—Å {base.get_withdraw(query.message.chat.id)} $TON, –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {str(0.16 - base.get_withdraw(query.message.chat.id))[:4]} $TON",


    elif (query.data == "captcha"):
        await FSM_adv.first_captcha.set()
        code_captcha, photo_id = random.choice(list(config.captcha_list.items()))
        async with state.proxy() as forme:
            forme["code_captcha"] = code_captcha

        await bot.send_photo(chat_id=query.message.chat.id,
                             photo=photo_id)


    elif (query.data == "back_admin"):
        await state.finish()
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        but1 = types.InlineKeyboardButton(text="–£–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞", callback_data="get_balance")
        but2 = types.InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞", callback_data="add_balance")
        but3 = types.InlineKeyboardButton(text="–¢–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤", callback_data="top_lider")
        but4 = types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å", callback_data="unik_user")
        but5 = types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º —é–∑–µ—Ä–∞", callback_data="rej_user")
        keyboard.add(but1, but2, but3, but4, but5)

        famous = await big_og()
        await bot.edit_message_text(chat_id=query.message.chat.id,
                                    message_id=query.message.message_id,
                                    text=f"<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å! üßëüèº‚Äçüíª</b>\n\n"
                                         f"<b>ü•∏ –õ—é–¥–µ–π –≤ –±–∞–∑–µ:</b> {base.get_count_man()} —á–µ–ª–æ–≤–µ–∫\n"
                                         f"<b>üèÜ –°–∞–º—ã–π –∫—Ä—É—Ç–æ–π:</b> @{famous}",
                                    reply_markup=keyboard,
                                    disable_web_page_preview=True)

    elif (query.data == "get_balance"):
        try:
            keyboard = types.InlineKeyboardMarkup()
            but1 = types.InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_admin")
            keyboard.add(but1)

            answer_post = requests.post(url="https://pay.crypt.bot/api/getBalance",
                                        headers={"Host": "pay.crypt.bot",
                                                 "Crypto-Pay-API-Token": config.appl_token})

            need_json = answer_post.json()
            text = f"<b>üí∞ –°—á–µ—Ç –±–æ—Ç–∞:</b>\n\n" \
                   f"TON: {need_json['result'][1]['available']}\n" \
                   f"USDT {need_json['result'][5]['available']}\n" \

            await bot.edit_message_text(chat_id=query.message.chat.id,
                                        message_id=query.message.message_id,
                                        text=text,
                                        reply_markup=keyboard,
                                        disable_web_page_preview=True)

        except Exception as exep:
            await bot.edit_message_text(chat_id=query.message.chat.id,
                                        message_id=query.message.message_id,
                                        text=f"<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
                                             f"<b>–ö–æ–¥:</b> <code>{exep}</code>",
                                        reply_markup=keyboard,
                                        disable_web_page_preview=True)

    elif (query.data == "add_balance"):
        await FSM_adv.add_balance.set()
        keyboard = types.InlineKeyboardMarkup()
        but1 = types.InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_admin")
        keyboard.add(but1)

        await bot.edit_message_text(chat_id=query.message.chat.id,
                                    message_id=query.message.message_id,
                                    text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è\n\n"
                                         "–í—ã–±—Ä–∞–Ω TON",
                                    reply_markup=keyboard,
                                    disable_web_page_preview=True)

    elif (query.data == "top_lider"):
        keyboard = types.InlineKeyboardMarkup()
        but1 = types.InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_admin")
        keyboard.add(but1)

        list_lder = await liders_table()
        await bot.edit_message_text(chat_id=query.message.chat.id,
                                    message_id=query.message.message_id,
                                    text=list_lder,
                                    reply_markup=keyboard,
                                    disable_web_page_preview=True)

    elif (query.data == "unik_user"):
        await FSM_adv.add_unik_user.set()
        keyboard = types.InlineKeyboardMarkup()
        but1 = types.InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_admin")
        keyboard.add(but1)

        await bot.edit_message_text(chat_id=query.message.chat.id,
                                    message_id=query.message.message_id,
                                    text="<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID —á–µ–ª–æ–≤–µ–∫–∞</i>\n\n"
                                         "<b>–ù–∞–ø—Ä–∏–º–µ—Ä:</b> <code>1095119526</code>",
                                    reply_markup=keyboard,
                                    disable_web_page_preview=True)

    elif (query.data == "rej_user"):
        await cabinet(query.message)


#### STATE HANDLERS ####
@dp.message_handler(state=FSM_adv.first_captcha)
async def answer_code(message: types.Message, state: FSMContext):
    data_list = await state.get_data()
    need_code = data_list["code_captcha"]

    if ((message.text).lower() == need_code.lower()):
        keyboard = types.InlineKeyboardMarkup()
        but1 = types.InlineKeyboardButton(text="–ö–∞–±–∏–Ω–µ—Ç", callback_data="cabinet")
        keyboard.add(but1)

        await message.answer(text="<b>‚úÖ –û—Ç–ª–∏—á–Ω–æ!</b>\n\n"
                                  "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∑–∞–π–º—ë—Ç 24 —á–∞—Å–∞, –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –∫–æ—Ç–æ—Ä—ã—Ö —Ç–µ–±–µ –ø—Ä–∏–¥—É—Ç —Ç–æ–∫–µ–Ω—ã TON –Ω–∞ —Å—á–µ—Ç. –î–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å <a href='t.me/CryptoBot?start=r-633430'>@CryptoBot</a> üëà\n\n"
                                  "üë• <i>–ü—Ä–∏–≥–ª–∞—à–∞–π —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π –≤ —ç—Ç–æ—Ç –±–æ—Ç –ø–æ —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∏ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞, –ø–æ–ª—É—á–∞–π—Ç–µ –µ—â–µ TON!</i>\n\n",
                            reply_markup=keyboard,
                             disable_web_page_preview=True)
        await state.finish()
        await sleep_wait(message)

    else:
        await message.reply(text="<b>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑</b>")
        code_captcha, photo_id = random.choice(list(config.captcha_list.items()))
        async with state.proxy() as forme:
            forme["code_captcha"] = code_captcha

        await bot.send_photo(chat_id=message.chat.id,
                             photo=photo_id)


if __name__ == '__main__':
    print("Bot work")
    executor.start_polling(dp)
